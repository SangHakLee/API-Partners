---
swagger: '2.0'
info:
  version: 1.1.0
  title: g클라우드 파트너 API
  contact:
    name: g클라우드
    url: https://cloud.gabia.com/
    email: cloud@gabia.com
  license:
    name: g클라우드
    url: https://cloud.gabia.com
  host: 10.222.222.227:3000
  basePath: /v1
  schemes:
    - https
  produces:
    - application/json
  description: |
    # Introduction
    클라우드 파트너 API는 HTTPS를 기반으로 동작되는 RESTful API 입니다.

    Request 본문에서는 `application/json` 이나 `application/x-www-form-urlencoded` 형태의 데이터를 허용하며 Response는 JSON 데이터를 반환합니다.

    ## HTTP Status
    **[HTTP 응답 코드](https://ko.wikipedia.org/wiki/HTTP_%EC%83%81%ED%83%9C_%EC%BD%94%EB%93%9C)** 사용해서 성공/실패 여부를 리턴합니다.

    자세한 오류 내용은 응답 객체의 **[`code` key](#section/Introduction/Error-Code)**를 확인합니다.
    | Status Code |  Status Text |                                                                                             Status Description                                                                                            |
    |:-----------:|:------------:|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|
    |     200     |      OK      | GET: 요청 성공<br/> PUT: 수정하려는 데이터가 기존의 데이터와 같기 때문에 변경하지 않고 그대로 리턴<br/> DELETE: 특정 자원에 종속된 자식 자원을 삭제한 경우. 자식 자원이 삭제된 부모 자원을 리턴한다.<br/> |
    |     201     |    Created   | POST: 요청 성공<br/> PUT: 요청 성공<br/>                                                                                                                                                                  |
    |     202     |   Accepted   | POST, PUT, DELETE: 요청 승인. 비동기 작업이기 때문에 HATEOAS, Callback으로 확인 필요                                                                                                                      |
    |     204     |  No Content  | DELETE: 요청성공                                                                                                                                                                                          |
    |     400     |  Bad Request | 필요 파라미터가 없거나, 파라미터가 유효하지 않는 경우                                                                                                                                                     |
    |     401     | Unauthorized | 인증 받지 않은 파트너, 사용자가 요청한 경우                                                                                                                                                               |
    |     403     |   Forbidden  | 요청을 진행할 수 없는 상태                                                                                                                                                                                |
    |     404     |   Not Found  | 존재하지 않는 자원의 조회, 수정, 삭제                                                                                                                                                                     |

    ## Error Code
    HTTP Status가 [400, 401, 403, 404]인 실패의 경우 `msg`와 `code`를 통해서 자세한 실패 내용을 확인할 수 있습니다.

    각 API마다 다른 Error Code를 리턴하며, 해당 내용은 API 설명에 나와 있습니다.

    **공통으로 사용되는 Error Code는 다음과 같습니다.**
    | Error Code |                                                   Error Message                                                   |                         Error Description                        |
    |:----------:|:-----------------------------------------------------------------------------------------------------------------:|:----------------------------------------------------------------:|
    | -621       | [Auth] REST API 오류. 필수값이 없거나 유효하지 않습니다.                                                          | 모든 API의 공통 에러. query, body, path에 넘어온 파라미터 오류   |
    | -3011      | [API] 자원 접근 권한. 입력된 값과 일치하는 자원이 존재하지 않음.                                                  |                                                                  |
    | -3012      | [API] 자원 접근 권한. 해당 자원이 입력된 파트너의 자원이 아님.                                                    |                                                                  |
    | -3013      | [API] 자원 접근 권한. 해당 자원이 입력된 파트너의 자원이나, 사용자가 불일치.                                      |                                                                  |
    | -3014      | [API] 자원 접근 권한. 해당 자원이 입력된 파트너의 자원이나, 기존 자원의 사용자와 요청으로 입력된 사용자가 불일치. | 두 가지 자원이 필요한 API 요청에서 두 자원의 사용자가 다른 경우. |
    | -3852      | [API] 사용자 오류. 등록되지 않은 사용자 입니다.                                                                   |                                                                  |

    ## Cloud Code
    클라우드 자원별 상태값

    - **[Servers](#tag/Servers)**
      | Code | Status Description |
      |:----:|:------------------:|
      | 01 | 정지 |
      | 02 | 정지중 |
      | 03 | 시작 |
      | 04 | 삭제 |
      | 06 | 삭제중 |
      | 07 | 생성중 |
    - **[Volumes](#tag/Volumes)**
      | Code | Status Description |
      |:----:|:------------------:|
      | 01 | 생성중 |
      | 02 | 생성 |
      | 03 | 삭제중 |
      | 04 | 삭제 |
    - **[Snapshots](#tag/Snapshots)**
      | Code | Status Description |
      |:----:|:------------------:|
      | 0 | 생성중 |
      | 9 | 생성 |
      | 2 | 삭제중 |
      | D | 삭제 |
    - **[Images](#tag/Images)**
      - **Type**
        | Type | Type Description |
        |:----:|:------------------:|
        | SSD | SSD 타입의 서버로 생성된 이미지 |
        | SATA | SATA 타입의 서버로 생성된 이미지 |
      - **Snap ID**
        | ID | Description |
        |:----:|:------------------:|
        | vm_{id} | SSD 서버로 생성된 이미지 |
        | snap_{id} | SATA 서버로 생성된 이미지 |


    ## 파트너 신청
    파트너 API 사용을 위해선 사전에 가비아 회원 가입 후 파트너 센터를 통해 g클라우드 파트너 신청이 필요합니다.

    **[가비아 회원 가입](https://www.gabia.com/member/member_register.php)**

    **[클라우드 파트너 신청](https://partnercenter.gabia.com/ezpartner)**

    ## 비동기 작업
    일부 자원의 생성/삭제 작업은 비동기로 이뤄집니다.

    서버생성/삭제, 이미지 생성/삭제 등의 작업은 완료시 **[HTTP 202](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/202)**  코드로 응답합니다.
    (서버가 요청을 접수했지만, 완료하지 못하고 처리중인 상태)
    - **HATEOAS**
      - 해당 작업의 성공/실패 여부를 알기 위해선 요청시 응답으로 받은 **[HATEOAS](https://en.wikipedia.org/wiki/HATEOAS)** links 정보로 다시 조회합니다.
      ```json
      // 서버 생성 요청 완료 후
      // HTTP Status 202
      // Response Body
      {
        //...
        "links": [
          {
            "rel": "self",
            "method": "GET",
            "href": "http://10.222.222.227:3000/v1/servers/vm_1"
          }
        ]
      }
      ```
    - **Callback**
      - 미리 등록한 callback url로 비동기 작업의 성공/실패 여부를 받을 수 있습니다.
      - callback은 작업 완료 후 최초 1회만 보내집니다. callback 수신 성공/실패 여부는 확인하지 않습니다.
      따라서 callback이 제대로 안 왔거나 파트너의 사정으로 받지 못했을 경우엔 HATEOAS 정보로 확인해야 합니다.


    ## API 공통 파라미터
    > GET 요청에서만 사용 가능합니다.
    > `GET` /servers 같은 목록을 가져오는 URL에서 사용합니다. 
    ```http
    /v1/servers?q=user_id=biz_777&paging=10,5&order=-name
    ```
    - **q**
      - 목록을 가져올 때 해당 조건으로 가져옵니다.
      - API 요청시 **query** parameter로 보냅니다.
      - `{key}={value}` 형식으로 보냅니다.
      - e.g.) **/servers?q=cpu=2,memory=4** 
        - cpu가 2면서 메모리가 4인 서버의 목록을 가져옵니다.

    - **Paging**
      - 목록을 페이징 처리 후 가져옵니다.
      - API 요청시 **query** parameter로 보냅니다.
      - limit, offset 순서로 보냅니다.
        - **limit**: 조건에 맞는 결과를 제한적으로 가져옵니다. 
        - **offset**: 조건에 맞는 결과를 가져오는 시작 순서를 제어합니다.
      - e.g.) **/servers?paging=10,5**
        - 조회된 서버의 6번째 부터 10개를 가져옵니다.
    - **Order**
      - 목록을 정렬 후 가져옵니다.
      - API 요청시 **query** parameter로 보냅니다.
      - 내림차순, 오름차순으로 순서를 제어할 수 있습니다.
        - **{field}**: field로 입력된 key를 기준으로 오름차순 정렬합니다.
        - **-{field}**: field로 입력된 key를 기준으로 내림차순 정렬합니다.
      - e.g.) **/servers?order=-name,cpu**
        - 서버 목록 조회시 `name` 기준 내림차순, `cpu` 기준 오름차순으로 정렬합니다.

    ## API 문서

    ### Example
    API 문서의 예제에 `{YOUR-JWT-TOKEN}` 같은 형식으로 나와있는 문서는 해당 내용을 파트너 자신의 데이터로 변경한 뒤 요청합니다.

    - Bearer {YOUR-JWT-TOKEN}
    - Bearer GSkj2xckjaw2.askd92e.asikdji12
    
    ### cURL 
    API 문서의 설명은 기본적으로 [cURL](https://ko.wikipedia.org/wiki/CURL) 예제가 포함되어 있습니다.

    ### Code Example
    PHP, Node.js를 사용하는 파트너를 위해 API를 사용하는 예제가 있습니다.
    - **PHP**: [PHP cURL](http://php.net/manual/en/book.curl.php)을 사용합니다.
    - **Node.js**: [NPM request](https://www.npmjs.com/package/request)를 사용합니다.


    # Authentication
    g클라우드 API는 JWT 토큰을 이용한 인증을 통하여 API 요청을 처리합니다.
    
    파트너 신청 승인 후 부여 받은 **secret key**를 이용해서 JWT 토큰을 발급 받습니다.

    클라우드 자원에 대한 모든 API 요청은 HTTP header에 JWT 토큰이 필요합니다. (**[토큰 발급](#tag/Token%2Fpaths%2F~1auth~1api%2Fpost)**)

    JWT 토큰은 기본 2시간 동안 유효하며, 만료 후 토큰을 다시 발급 받아야합니다. 
    
    <!-- ReDoc-Inject: <security-definitions> -->

securityDefinitions:
  JWT:
    description: |
      **[토큰 발급](#tag/Token%2Fpaths%2F~1auth~1api%2Fpost)**
      ```http
      POST /v1/auth/api HTTP/1.1
      Host: 10.222.222.227:3000
      Content-Type: application/x-www-form-urlencoded
      Cache-Control: no-cache

      partner_id={YOUR-ID}&secret={YOUR-SECRET-KEY}
      ```

      **토큰**
      ```http
      Authorization: Bearer {YOUR-JWT-TOKEN}
      ```
    name: bearer
    type: oauth
tags:
- name: Token
  description: |
    API 사용을 위한 JWT 토큰을 발급 받고, 발급 받은 토큰을 확인합니다.
- name: Users
  description: 클라우드 사용자
- name: Servers
  description: |
    클라우드 서버를 생성 및 관리 할 수 있습니다.
    - **status**: [서버 상태](#section/Introduction/Cloud-Code)
    - **stroage**: 서버 기본 루트 영역 볼륨 + 서버에 부착된 볼륨(**volumes**)들의 총합
      - **`GB`** 단위
    - **regdate**: 생성일
      - **`YYYY-MM-DD hh:mm:ss`**
- name: Volumes
  description: 볼륨
- name: PublicIps
  description: 공인 IP 추가 및 삭제, 서버 & 로드밸런서에 Attach, Detach를 할 수 있습니다.
- name: Firewall
  description: |-
    서버에 방화벽을 추가합니다.
    - 방화벽은 **공인 IP**가 부착된 서버만 추가할 수 있습니다.
    - 추가된 방화벽은 수정 불가합니다.(삭제 후 다시 추가)
- name: LoadBalancers
  description: 로드밸런서
- name: Snapshots
  description: |-
    스냅샷을 관리하는 API 입니다.

    **Basic, Premium**서버에 대해서만 생성 가능합니다.
- name: Images
  description: "이미지를 관리하는 API 입니다.\n- **Basic, Premium 서버 :** 스냅샷을 생성 후 해당 스냅샷 ID로
    이미지를 생성합니다.\n- **SSD 서버 :** 스냅샷을 생성하지 않고 서버에서 직접 이미지를 생성합니다. \n SSD 서버로 생성된 이미지는
    이미지 만들기전의 서버 사양과 같은 사양만 생성 됩니다.\n\n"
parameters:
  partner_id:
    type: string
    description: 파트너 ID
    example: biz_1004
  user_id:
    type: string
    description: 사용자 ID
    in: path
    minLength: 3
    maxLength: 16
    pattern: ^[\w\-]$
    example: company_777
  svr_id:
    name: svr_id
    description: 서버 Id
    in: path
    required: true
    type: string
    pattern: ^(vm_)+[1-9]{1}\d*$
    example: vm_1
  svr_name:
    name: name
    type: string
    description: |
      서버 이름
      - 중복 불가
    in: formData
    required: false
    minLength: 3
    maxLength: 16
    pattern: ^[\w\-]$
    example: event-server
  svr_desc:
    name: desc 
    type: string
    description: 서버 설명
    in: formData
    required: false
    minLength: 0
    maxLength: 100
    pattern: ^((?![\/?;:|*<>@\\\'\"]).){0,100}$
    example: 이벤트서버
  vol_id:
    name: vol_id
    description: 볼륨 Id
    in: path
    required: true
    type: string
  collectionQuery:
    name: q
    in: query
    type: string
    description: |-
      검색 조건 추가
      - e.g.) /v1/servers?q=user_id=test,type=SATA
      - **=** 조건만 가능합니다.
  collectionPaging:
    name: paging
    in: query
    description: |-
      목록의 페이징 처리
      - e.g.) /v1/servers?paging=10,5
       - 6번째 부터 10개 가져옴
    type: string
  collectionOrder:
    name: order
    in: query
    type: string
    description: |-
      목록의 정렬(내림차순의 정렬은 **-**를 앞에 붙입니다.)
      - e.g.) /v1/servers?order=-name,cpu
       - 이름의 내림차순, cpu의 오름차순
responses: 
  Unauthorized:
    description: 인증 실패
    schema:
      $ref: "#/definitions/Error"
paths:
  /auth/api:
    post:
      summary: 토큰 발급
      description: |-
        파트너의 secret key로 JWT 토큰 발급.
        - **승인완료(A)** 상태의 파트너만 가능합니다.
        - 중요 정보는 **encrypt** key에 암호화되어 토큰이 발급됩니다.

        ### cURL
        ```
        curl -X POST \
          http://10.222.222.227:3000/v1/auth/api \
          -H 'cache-control: no-cache' \
          -H 'content-type: application/x-www-form-urlencoded' \
          -d 'partner_id={YOUR-ID}&secret={YOUR-SECRET-KEY}'
        ```

        ### Error Code
        - `-4901` : [API] 파트너 토큰 발급 오류. 존재하지 않는 파트너.
        - `-4902` : [API] 파트너 토큰 발급 오류. 미승인 상태의 파트너.
        - `-4903` : [API] 파트너 토큰 발급 오류. 유효하지 않은 secret key.
      tags:
        - Token
      produces:
        - application/json
      x-code-samples:
        - lang: PHP
          source: |
            <?php
            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_PORT => "3000",
              CURLOPT_URL => "http://10.222.222.227:3000/v1/auth/api",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "partner_id={YOUR-ID}&secret={YOUR-SECRET-KEY}",
              CURLOPT_HTTPHEADER => array(
                "authorization: Bearer {YOUR-JWT-TOKEN}",
                "cache-control: no-cache",
                "content-type: application/x-www-form-urlencoded",
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);
        - lang: Node.js
          source: |
            var request = require("request");

            var options = {
                method: 'POST',
                url: 'http://10.222.222.227:3000/v1/auth/api',
                headers: {
                    'cache-control': 'no-cache',
                    'content-type': 'application/x-www-form-urlencoded',
                    'authorization': 'Bearer {YOUR-JWT-TOKEN}'
                },
                form: {
                  partner_id: '{YOUR-ID}',
                  secret: '{YOUR-SECRET-KEY}'
                }
            };

            request(options, function(error, response, body) {
                if (error) throw new Error(error);

                console.log(body);
            });
      parameters:
        - name: partner_id
          description: 파트너 ID
          in: formData
          required: true
          type: string
        - name: secret
          description: API 비밀키
          in: formData
          required: true
          type: string
          format: byte
      responses:
        200:
          description: OK. 토큰 발행 성공
          schema:
            type: object
            properties:
              token:
                type: string
                description: JWT 토큰
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbmNyeXB0IjoiYTFhYzcxMmIwZDUyY2UxNDY5ZDM5OTQzODFiMjg4MDk3MzQwNGQ1Mjc0NzMzYWNlOTZjZDY0ODNiZmMzNzU0OGNlN2JhM2U2YmFhNmZiNzJjZDZlYTY0MWI3M2NmMWY2MGI0NTA4NDFkN2Q1MjgwYmU2MDFiZDkyOTNiZjAyYzAiLCJpYXQiOjE1MDUzNzM5MDYsImV4cCI6MTUwNTQwOTkwNiwiaXNzIjoiZ2Nsb3VkIiwic3ViIjoic29ja2V0In0.kGVMLlMfhYWyjCP1AmsmFfLmQmUH0JVuDrX0wm963YQ
        401:
          description: Unauthorized. 인증 실패
          schema:
            type: object
            properties:
              msg:
                type: string
                description: 에러 메세지
                example: "'secret' is must required. Your input 'secret': ''."
              code:
                type: integer
                description: 에러 코드
                example: -621
              desc:
                type: string
                description: 에러 설명
                example: "[Auth] REST API 오류. 필수값이 없거나 유효하지 않습니다."
  /auth/api/token:
    get:
      summary: 토큰 확인
      description: |-
        사용자의 JWT 토큰 정보 확인.
        - **secret** 정보를 넘기지 않으면, 중요 정보는 암호화 상태로 리턴 받습니다.
          ```json
          {
            "encrypt": "a1ac712b0d52ce1469d....."
            // ...
          }
          ```
        - **secret** 정보를 넘기면, 유효한 secret인 경우 해당 데이터를 복호화하여 리턴 받습니다.
          ```json
          {
            "partner_id": "ryan0425",
            "role": "user",
            "scope": "api:all"
            // ...
          }
          ```

        ### cURL
        ```
        curl -X GET \
          'http://10.222.222.227:3000/v1/auth/api/token?token=&secret=Y2YxZWUyY2UtMTk4OS01ZjNhLTlmMjktODdhOGM3YmMzY2Nk' \
          -H 'authorization: Bearer {YOUR-JWT-TOKEN}' \
          -H 'cache-control: no-cache' \
          -H 'content-type: application/x-www-form-urlencoded' \
          -d 'partner_id={YOUR-ID}&secret={YOUR-SECRET-KEY}'
        ```

        ### Error Code
        - `-606` : [Auth] JWT 오류. 유효하지 않은 secret key.
      tags:
        - Token
      produces:
        - application/json
      parameters:
        - in: query
          name: token
          required: true
          type: string
          description: JWT 토큰
        - in: query
          name: secret
          required: false
          type: string
          description: "'encrypt' 디코딩 비밀키"
      responses:
        200:
          description: JWT 토큰 확인 성공
          schema:
            type: object
            properties:
              encrypt:
                type: string
                description: 암호화된 payload
                example: a1ac712b0d52ce1469d3994381b2880973404d5274733ace96cd6483bfc37548ce7ba3e6baa6fb72cd6ea641b73cf1f60b450841d7d5280be601bd9293bf02c0
              iat:
                type: integer
                description: JWT 발행일(JWT 기본 옵션)
                example: 1505373906
              exp:
                type: integer
                description: JWT 만료일(JWT 기본 옵션)
                example: 1505409906
              iss:
                type: string
                description: JWT 발행자(JWT 기본 옵션)
                example: gcloud
              sub:
                type: string
                description: JWT 주제(JWT 기본 옵션)
                example: socket
              createdAt:
                type: dateTime
                description: JWT 발행일
                example: '2017-09-14 16:25:06'
              expiredAt:
                type: dateTime
                description: JWT 만료일
                example: '2017-09-15 02:25:06'
              remainMinutes:
                type: integer
                description: 토큰 만료까지 남은 분
                example: 598
              expired:
                type: boolean
                description: 토큰 만료 여부
                example: false
        400:
          description: Bad Request. 파라미터 오류
          schema:
            type: object
            properties:
              msg:
                type: string
                description: 에러 메세지
                example: "'token' is must required. Your input 'token': ''."
              code:
                type: integer
                description: 에러 코드
                example: -621
              desc:
                type: string
                description: 에러 설명
                example: "[Auth] REST API 오류. 필수값이 없거나 유효하지 않습니다."
        401:
          description: Unauthorized. 인증 실패
          schema:
            type: object
            properties:
              msg:
                type: string
                description: 에러 메세지
                example: "invalid secret key. Your input : ''."
              code:
                type: integer
                description: 에러 코드
                example: -606
              desc:
                type: string
                description: 에러 설명
                example: "[Auth] JWT 오류. 유효하지 않은 secret key"
  /users:
    post:
      summary: 사용자 등록
      description: |
        파트너의 사용자 등록.
        - 등록된 사용자만 자원 이용 가능합니다.

        ### cURL
        ```
        curl -X POST \
          http://10.222.222.227:3000/v1/users \
          -H 'authorization: Bearer {YOUR-JWT-TOKEN}' \
          -H 'cache-control: no-cache' \
          -H 'content-type: application/x-www-form-urlencoded' \
          -d user_id={YOUR--USER-ID}
        ```

        ### Error Code
        - `-3851` : [API] 사용자 등록 오류. 이미 존재하는 사용자.
      tags:
        - Users
      produces:
        - application/json
      parameters:
        - name: user_id
          description: 파트너 ID
          in: formData
          required: true
          type: string
          minLength: 3
          maxLength: 16
          pattern: ^[\w\-]$
      x-code-samples:
        - lang: PHP
          source: |
            <?php
            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_PORT => "3000",
              CURLOPT_URL => "http://10.222.222.227:3000/v1/users",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "user_id=company_777",
              CURLOPT_HTTPHEADER => array(
                "authorization: Bearer {YOUR-JWT-TOKEN}",
                "cache-control: no-cache",
                "content-type: application/x-www-form-urlencoded",
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);
        - lang: Node.js
          source: |
            var request = require("request");

            var options = {
                method: 'POST',
                url: 'http://10.222.222.227:3000/v1/users',
                headers: {
                    'cache-control': 'no-cache',
                    'content-type': 'application/x-www-form-urlencoded',
                    'authorization': 'Bearer {YOUR-JWT-TOKEN}'
                },
                form: { 
                  'user_id': 'company_777'
                }
            };

            request(options, function(error, response, body) {
                if (error) throw new Error(error);

                console.log(body);
            });
      responses:
        201:
          description: Created. 등록 성공
          schema:
            $ref: "#/definitions/Users"
        400:
          description: Bad Request. 파라미터 오류
          schema:
            type: object
            properties:
              msg:
                type: string
                description: 에러 메세지
                example: "'user_id' must [alphabetic, numeric, '-', '_'] only combination is possible. (must 3 ~ 50 characters). Your input 'user_id': ''."
              code:
                type: integer
                description: 에러 코드
                example: -621
              desc:
                type: string
                description: 에러 설명
                example: "[Auth] REST API 오류. 필수값이 없거나 유효하지 않습니다."
        401:
          description: Unauthorized. 인증 실패
          schema:
            type: object
            properties:
              msg:
                type: string
                description: 에러 메세지
                example: "Check your access token. Your input: undefined."
              code:
                type: integer
                description: 에러 코드
                example: -601
              desc:
                type: string
                description: 에러 설명
                example: "[Auth] JWT 오류. 토큰값이 필요합니다"
        403:
          description: Forbidden. 이미 등록된 사용자
          schema:
            type: object
            properties:
              msg:
                type: string
                description: 에러 메세지
                example: "user_id '{YOUR-USER_ID}' is already a user of partner '{YOUR-ID}'."
              code:
                type: integer
                description: 에러 코드
                example: -601
              desc:
                type: string
                description: 에러 설명
                example: "[API] 사용자 등록 오류. 이미 존재하는 사용자."
    get:
      summary: 사용자 목록
      description: |
        파트너의 사용자 목록.
        - **Query** Parameters
          - **`q`**
            - **user_id**
            - e.g.) /users?q=user_id=company_777
          - **`order`**
            - **user_id**, **createdate**
            - e.g.) /users?order=-createdate

        ### cURL
        ```
        curl -X GET \
          http://10.222.222.227:3000/v1/users \
          -H 'authorization: Bearer {YOUR-JWT-TOKEN}' \
          -H 'cache-control: no-cache' \
          -H 'content-type: application/x-www-form-urlencoded' \
        ```
      tags:
        - Users
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/collectionQuery"
        - $ref: "#/parameters/collectionPaging"
        - $ref: "#/parameters/collectionOrder"
      responses:
        200:
          description: OK. 사용자 조회 성공
          schema:
            type: array
            description: 사용자 목록
            items:
              $ref: "#/definitions/Users"
        400:
          description: Bad request. 파라미터 오류
          schema:
            $ref: "#/definitions/BadRequest"
        401:
          description: Unauthorized. 인증 실패
          schema:
            $ref: "#/definitions/Unauthorized"
  /users/{user_id}:
    delete:
      summary: 사용자 삭제
      description: |
        파트너의 사용자 삭제.
        - 사용중인 모든 사용자의 자원이 함께 삭제됩니다.

        ### cURL
        ```
        curl -X DELETE \
          http://10.222.222.227:3000/v1/users/company_777 \
          -H 'authorization: Bearer {YOUR-JWT-TOKEN}' \
          -H 'cache-control: no-cache' \
          -H 'content-type: application/x-www-form-urlencoded' \
        ```

        ### Error Code
        - `-3851` : [API] 사용자 등록 오류. 이미 존재하는 사용자.
      tags:
        - Users
      produces:
        - application/json
      parameters:
        - name: user_id
          description: 파트너 ID
          in: formData
          required: true
          type: string
          minLength: 3
          maxLength: 16
          pattern: ^[\w\-]$
      x-code-samples:
        - lang: PHP
          source: |
            <?php
            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_PORT => "3000",
              CURLOPT_URL => "http://10.222.222.227:3000/v1/users/company_777",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                "authorization: Bearer {YOUR-JWT-TOKEN}",
                "cache-control: no-cache",
                "content-type: application/x-www-form-urlencoded",
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);
        - lang: Node.js
          source: |
            var request = require("request");

            var options = {
                method: 'POST',
                url: 'http://10.222.222.227:3000/v1/users/company_777',
                headers: {
                    'cache-control': 'no-cache',
                    'content-type': 'application/x-www-form-urlencoded',
                    'authorization': 'Bearer {YOUR-JWT-TOKEN}'
                }
            };

            request(options, function(error, response, body) {
                if (error) throw new Error(error);

                console.log(body);
            });
      responses:
        204:
          description: No Content. 등록 성공
          schema:
            type: object
        401:
          description: Unauthorized. 인증 실패
          schema:
            type: object
            properties:
              msg:
                type: string
                description: 에러 메세지
                example: "Check your access token. Your input: undefined."
              code:
                type: integer
                description: 에러 코드
                example: -601
              desc:
                type: string
                description: 에러 설명
                example: "[Auth] JWT 오류. 토큰값이 필요합니다"
        404:
          description: Not Found. 존재하지 않는 사용자
          schema:
            type: object
            properties:
              msg:
                type: string
                description: 에러 메세지
                example: "user_id '{USER_ID}' is not exist."
              code:
                type: integer
                description: 에러 코드
                example: -3861
              desc:
                type: string
                description: 에러 설명
                example: "[API] 사용자 오류. 등록되지 않은 사용자 입니다."
  /servers:
    get:
      summary: 서버 목록
      description: |
        사용자의 모든 서버 목록을 조회합니다.
        - 삭제된 서버 제외
        - **Query** Parameters
          - **`q`**
            - **user_id**, **status**, **os**, **type**
            - e.g.) /servers?q=stauts=01,os=linux
          - **`order`**
            - **svr_id**, **user_id**, **regdate**, **name**, **desc**, **memory**, **cpu**, **status**
            - e.g.) /users?order=-regdate

        ### cURL
        ```
        curl -X GET \
          http://10.222.222.227:3000/v1/servers \
          -H 'authorization: Bearer {YOUR-JWT-TOKEN}' \
          -H 'cache-control: no-cache' \
          -H 'content-type: application/x-www-form-urlencoded' \
        ```
      tags:
        - Servers
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/collectionQuery"
        - $ref: "#/parameters/collectionPaging"
        - $ref: "#/parameters/collectionOrder"
      x-code-samples:
        - lang: PHP
          source: |
            <?php
            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_PORT => "3000",
              CURLOPT_URL => "http://10.222.222.227:3000/v1/servers",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "authorization: Bearer {YOUR-JWT-TOKEN}",
                "cache-control: no-cache",
                "content-type: application/x-www-form-urlencoded",
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);
        - lang: Node.js
          source: |
            var request = require("request");

            var options = {
                method: 'GET',
                url: 'http://10.222.222.227:3000/v1/servers',
                headers: {
                    'cache-control': 'no-cache',
                    'content-type': 'application/x-www-form-urlencoded',
                    'authorization': 'Bearer {YOUR-JWT-TOKEN}'
                }
            };

            request(options, function(error, response, body) {
                if (error) throw new Error(error);

                console.log(body);
            });
      responses:
        200:
          description: 서버 목록 조회 성공
          schema:
            type: array
            description: 서버 목록
            items:
              $ref: "#/definitions/Servers"

        401:
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
    post:
      summary: 서버 생성
      description: |
        서버를 생성합니다.
        - 완료 후 서버는 생성중(`status: 07`)입니다. 일정 시간 후 완료(`status: 03`)로 변경됩니다.
        - 서버 접속 비밀번호는 생성시에만 확인할 수 있습니다.(분실시 비빌번호 변경 요청)
        - **type**: ssd 일때, 가능한 cpu, memory, hdd는 정해져 있습니다.
          | CPU | Memory | HDD |
          |-----|--------|-----|
          | 1   | 1      | 30  |
          | 2   | 2      | 60  |
          | 2   | 4      | 120 |
          | 4   | 4      | 120 |
          | 4   | 8      | 240 |
          | 4   | 16     | 480 |
          | 8   | 16     | 480 |
          | 16  | 32     | 960 |
        
        ### cURL
        ```
        curl -X POST \
          http://10.222.222.227:3000/v1/servers \
          -H 'authorization: Bearer {YOUR-JWT-TOKEN}' \
          -H 'cache-control: no-cache' \
          -H 'content-type: application/x-www-form-urlencoded' \
          -d 'user_id=company_777&service_zone=zone_1&img_id=img_131&ip_use=N&name=as-server&desc=scale-out%20server&type=basic&cpu=1&memory=1&hdd=50'
        ```

        ### Error Code
        - `-4101` : [API] 서버 생성 오류. 서버명 중복
        - `-4102` : [API] 서버 생성 오류. 서버에 부착된 볼륨 정보가 없음
      tags:
      - Servers
      parameters:
      - name: user_id
        description: 사용자 ID
        in: formData
        required: true
        type: string
      - name: name
        description: |
          서버 이름
          - 중복 불가
        in: formData
        required: true
        type: string
        minLength: 1
        maxLength: 16
        pattern: ^[\w\-]{1,16}$
      - name: desc
        description: 서버 설명
        in: formData
        required: false
        type: string
        minLength: 0
        maxLength: 100
        pattern: ^((?![\/?;:|*<>@\\\'\"]).){0,100}$
      - name: type
        description: |-
          서버 종류
          - **basic**: g클라우드 서버의 가장 기본적인 서버로써, 가격대비 뛰어난 성능을 자랑합니다. g클라우드의 모든 기능을 이용할 수 있습니다.
          - **premium**: 고급 서버를 이용하여 구축하는 고사양 서버로써, 매우 높은(CPU 최대 16vCore, 메모리 최대 32GB) 사양을 선택할 수 있으며, g클라우드의 모든 기능을 이용할 수 있습니다.
          - **ssd**: SSD가 장착된 ‘고성능' 서버입니다. 최초에 선택한 사양을 변경할 수 없으며, 오토스케일링 기능과 g클라우드 스토리지를 이용할 수 없습니다.
        in: formData
        required: true
        type: string
        enum: ['basic','premium','ssd']
      - name: ssd
        description: |
          type이 **ssd**일 때, 미리 정의된 cpu, memory, hdd를 사용할 수 있습니다.
            - cpu/memory/hdd 순입니다.
            - type이 **ssd**만 가능하며, 다른 값일 때는 무시됩니다.
            - cpu, meory, hdd의 값을 입력하지 않습니다. 입력시 해당 값들은 무시되고 **ssd**의 선택값이 적용됩니다.
        in: formData
        required: false
        type: string
        enum:
          - 1/1/30
          - 2/2/60
          - 2/4/120
          - 4/4/120
          - 4/8/240
          - 4/16/480
          - 8/16/480
          - 16/32/960
      - name: cpu
        description: |-
          서버 CPU
          - **Core** 단위
          - **type**
            - **basic**: **1, 2, 4, 8** 가능
            - **premium**: **4, 8, 16** 가능
        in: formData
        required: false
        type: integer
        format: int32
        enum: [1,2,4,8,16]
      - name: memory
        description: |-
          서버 메모리
          - **GB** 단위
          - **type**
            - **basic**: **1, 2, 3, 4, 8** 가능
            - **premium**: **16, 32, 64, 128** 가능
        in: formData
        required: false
        type: integer
        format: int32
        enum: [1,2,3,4,8,16,32,64,128]
      - name: hdd
        description: |-
          추가 Disk 용량
          - **GB** 단위
          - **type**
            - **basic**: **50, 100, ..., 450, 500** 가능 50 <= hdd <= 500, 50의 배수
            - **premium**: **50, 100, ..., 450, 500** 가능 50 <= hdd <= 500, 50의 배수
        in: formData
        required: false
        type: integer
        format: int32
      - name: img_id
        description: 이미지 ID
        in: formData
        required: true
        type: string
        pattern: ^(img_)+[1-9]{1}\d*$
      - name: ip_use
        description: |-
          IP 사용 여부
          - **N**: 사설 IP만 갖는 서버를 생성합니다. 외부에서 접근을 원할 시, 서버에 IP를 붙이는 작업이 필요합니다.
          - **Y**: 서버 생성과 동시에 외부에서 접근이 가능한 공인 IP를 할당 받고 서버에 붙입니다.
        in: formData
        required: true
        type: string
        enum: [N, Y ]
      - name: service_zone
        description: 서비스 존
        in: formData
        required: true
        type: string
        enum: [zone_1, zone_2]
      produces:
        - application/json
      x-code-samples:
        - lang: PHP
          source: |
            <?php
            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_PORT => "3000",
              CURLOPT_URL => "http://10.222.222.227:3000/v1/servers",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "user_id=company_777&service_zone=zone_1&img_id=img_131&ip_use=N&name=as-server&desc=scale-out%20server&type=basic&cpu=1&memory=1&hdd=50",
              CURLOPT_HTTPHEADER => array(
                "authorization: Bearer {YOUR-JWT-TOKEN}",
                "cache-control: no-cache",
                "content-type: application/x-www-form-urlencoded",
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);
        - lang: Node.js
          source: |
            var request = require("request");

            var options = {
                method: 'POST',
                url: 'http://10.222.222.227:3000/v1/servers',
                headers: {
                    'cache-control': 'no-cache',
                    'content-type': 'application/x-www-form-urlencoded',
                    'authorization': 'Bearer {YOUR-JWT-TOKEN}'
                },
                form: {
                  user_id: 'company_777',
                  service_zone: 'zone_1',
                  img_id: 'img_131',
                  ip_use: 'N',
                  name: 'as-server',
                  desc: 'scale-out server',
                  type: 'basic',
                  cpu: '1',
                  memory: '1',
                  hdd: '50'
                }
            };

            request(options, function(error, response, body) {
                if (error) throw new Error(error);

                console.log(body);
            });
      responses:
        202:
          description: Accepted. 서버 생성 요청 성공
          schema:
            "$ref": "#/definitions/Servers"
        400:
          description: Bad request. 파라미터 오류
          schema:
            $ref: "#/definitions/BadRequest"
        401:
          description: Unauthorized. 인증 실패
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: Forbidden. img_id 파트너/사용자의 자원이 아닌 경우
          schema:
            $ref: "#/definitions/PermissionDeny"
        404:
          description: Not Found. img_id 존재하지 않음
          schema:
            $ref: "#/definitions/NotFound"
  /servers/{svr_id}:
    get:
      summary: 서버 상세정보
      description: |
        서버의 상세정보를 조회합니다.

        ### cURL
        ```
        curl -X GET \
          http://10.222.222.227:3000/v1/servers/vm_1 \
          -H 'authorization: Bearer {YOUR-JWT-TOKEN}' \
          -H 'cache-control: no-cache' \
          -H 'content-type: application/x-www-form-urlencoded' \
        ```
      tags:
      - Servers
      parameters:
        - $ref: "#/parameters/svr_id"
      produces:
      - application/json
      responses:
        200:
          description: OK. 서버 상세정보 조회 성공
          schema:
            $ref: "#/definitions/Servers"
        400:
          description: Bad request. 파라미터 오류
          schema:
            $ref: "#/definitions/BadRequest"
        401:
          description: Unauthorized. 인증 실패
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: Forbidden. 서버가 파트너/사용자의 자원이 아닌 경우
          schema:
            $ref: "#/definitions/PermissionDeny"
        404:
          description: Not Found. 존재하지 않음
          schema:
            $ref: "#/definitions/NotFound"
    put:
      summary: 서버 변경
      description: |-
        ##서버 이름, 설명 변경을 변경합니다.
        - **name**, **desc** 둘 중 하나는 반드시 필요합니다.
        - 요청한 **name**, **desc**가 기존의 데이터와 일치하면 변경하지 않습니다.
      tags:
        - Servers
      parameters:
        - $ref: "#/parameters/svr_id"
        - $ref: "#/parameters/svr_name"
        - $ref: "#/parameters/svr_desc"
      x-code-samples:
        - lang: PHP
          source: |
            <?php
            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_PORT => "3000",
              CURLOPT_URL => "http://10.222.222.227:3000/v1/servers/vm_1",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "name=new-name&desc=new-desc",
              CURLOPT_HTTPHEADER => array(
                "authorization: Bearer {YOUR-JWT-TOKEN}",
                "cache-control: no-cache",
                "content-type: application/x-www-form-urlencoded",
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);
        - lang: Node.js
          source: |
            var request = require("request");

            var options = {
                method: 'PUT',
                url: 'http://10.222.222.227:3000/v1/servers/vm_1',
                headers: {
                    'cache-control': 'no-cache',
                    'content-type': 'application/x-www-form-urlencoded',
                    'authorization': 'Bearer {YOUR-JWT-TOKEN}'
                },
                form: { 
                  'name': 'new-name'
                  'desc': 'new-desc'
                }
            };

            request(options, function(error, response, body) {
                if (error) throw new Error(error);

                console.log(body);
            });
      produces:
        - application/json
      responses:
        200:
          description: OK.기존과 같은 이름, 설명이기 때문에 기존 정보 반환
          schema:
            $ref: "#/definitions/Servers"
        201:
          description: Created. 이름, 설명 변경 성공
          schema:
            $ref: "#/definitions/Servers"
        401:
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: Forbidden. svr_id 서버가 파트너/사용자의 자원이 아닌 경우
          schema:
            $ref: "#/definitions/PermissionDeny"
        404:
          description: Not Found. svr_id 존재하지 않음
          schema:
            $ref: "#/definitions/NotFound"
    delete:
      summary: 서버 삭제
      description: |-
        ## 서버를 삭제합니다.
        - **정지(status: 01)** 상태의 서버만 삭제할 수 있습니다.
        - 기본적으로 볼륨/IP가 없는 서버만 삭제할 수 있습니다. **`Deprecated`** ~~볼륨/IP 해제 과정을 선행 후 삭제하려면 다음과 같이 uri query 요청을 합니다. **?force=true**~~

        ### cURL
        ```
        curl -X DELETE \
          http://10.222.222.227:3000/v1/servers/vm_1 \
          -H 'authorization: Bearer {YOUR-JWT-TOKEN}' \
          -H 'cache-control: no-cache' \
          -H 'content-type: application/x-www-form-urlencoded' \
        ```

        ### Error Code
        - `-4131` : [API] 서버 삭제 오류. 서버 삭제 불가 상태. 정지 상태에서만 가능합니다.
        - `-4132` : [API] 서버 삭제 오류. 서버 삭제 불가 상태. 서버에 부착된 볼륨이 있습니다.
        - `-4133` : [API] 서버 삭제 오류. 서버 삭제 불가 상태. 서버에 부착된 IP가 있습니다.
        - `-4134` : [API] 서버 삭제 오류. 서버 삭제 불가 상태. 서버에 생성/삭제 중 상태의 스냅샷이 있습니다.
      tags:
        - Servers
      parameters:
        - $ref: "#/parameters/svr_id"
        - in: query
          name: force
          required: false
          type: boolean
          enum: [true, false]
          description: "**`Deprecated`** ~~볼륨/IP 강제 해제 여부. 값이 없으면 false로 판단.~~\n- **true**:
            서버에 부착된 볼륨/IP가 존재하면 해제 후 서버를 삭제한다. 볼륨/IP 자원을 삭제하지 않는다.\n- **false**: 서버에
            부착된 볼륨/IP가 존재하면 서버를 삭제할 수 없고 **403**으로 응답한다. "
      x-code-samples:
        - lang: PHP
          source: |
            <?php
            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_PORT => "3000",
              CURLOPT_URL => "http://10.222.222.227:3000/v1/servers/vm_1",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_POSTFIELDS => "user_id=company_777",
              CURLOPT_HTTPHEADER => array(
                "authorization: Bearer {YOUR-JWT-TOKEN}",
                "cache-control: no-cache",
                "content-type: application/x-www-form-urlencoded",
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);
        - lang: Node.js
          source: |
            var request = require("request");

            var options = {
                method: 'DELETE',
                url: 'http://10.222.222.227:3000/v1/servers/vm_1',
                headers: {
                    'cache-control': 'no-cache',
                    'content-type': 'application/x-www-form-urlencoded',
                    'authorization': 'Bearer {YOUR-JWT-TOKEN}'
                },
                form: { 
                  'user_id': 'company_777'
                }
            };

            request(options, function(error, response, body) {
                if (error) throw new Error(error);

                console.log(body);
            });
      produces:
        - application/json
      responses:
        202:
          description: Accepted. 서버 삭제 요청 성공
        400:
          description: Bad request. 파라미터 오류
          schema:
            $ref: "#/definitions/BadRequest"
        401:
          description: Unauthorized. 인증 실패
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: Forbidden. svr_id 파트너/사용자의 자원이 아닌 경우
          schema:
            $ref: "#/definitions/PermissionDeny"
        404:
          description: Not Found. svr_id 존재하지 않음
          schema:
            $ref: "#/definitions/NotFound"
  /servers/{svr_id}/spec:
    put:
      summary: 서버 사양변경
      description: |-
        ## 서버의 사양을 변경합니다.
        - 변경시 서버가 <b style='color:red'>정지</b>되어 있는 상태일때만 가능합니다.
        - **basic** type 서버 변경 가능 값
         - **cpu** : 1,2,4,8
         - **memory** : 1,2,3,4,8
        - **preminum** type 서버 가능 변경 값
         - **cpu** : 4,8,16
         - **memory** : 16,32,64,128
      tags:
        - Servers
      parameters:
        - $ref: "#/parameters/svr_id"
        - name: cpu
          description: 변경하려는 서버 CPU
          in: formData
          required: false
          type: integer
          format: int32
        - name: memory
          description: 변경하려는 서버 메모리
          in: formData
          required: false
          type: integer
          format: int32
      produces:
        - application/json
      responses:
        '200':
          description: OK. 기존과 같은 cpu, memory 요청이기 때문에 변경 없이 응답
        '201':
          description: Created. cpu, memory 변경 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 서버가 파트너/사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 svr_id와 일치하는 자원이 없는 경우
        default:
          description: Unexpected error
  "/servers/{svr_id}/console":
    get:
      summary: 터미널 접속
      description: 공인 IP가 부여된 서버에 원격 접속
      tags:
      - Servers
      parameters:
      - "$ref": "#/parameters/svr_id"
      produces:
      - application/json
      responses:
        '200':
          description: 터미널 성공
          schema:
            type: object
            properties:
              token:
                type: string
                description: 터미널 Token 정보
        '400':
          description: Bad request.
        '404':
          description: 서버 ID가 존재하지 않음
        default:
          description: Unexpected error
  "/servers/{svr_id}/action":
    put:
      summary: 서버 상태 변경
      description: |-
        ## 서버의 상태를 변경합니다.
        - **start**: 정지(status: 01) 상태의 서버를 시작 상태로 변경합니다. 이미 시작(status: 03) 상태의 서버에는 요청 불가합니다. 요청 후 시작중(status: 05) 상태가 되며, 일정 시간 후 시작 완료됩니다.
        - **stop**:  시작(status: 03) 상태의 서버를 정지 상태로 변경합니다. 시작 상태의 서버만 요청 가능합니다. 요청 후 정지중(status: 02) 상태가 되며, 일정 시간 후 정지 완료됩니다.
        - **reboot**: 시작 상태의 서버를 재시작합니다.
        - **kill**:  시작 상태의 서버를 강제종료 합니다.
      tags:
      - Servers
      parameters:
      - "$ref": "#/parameters/svr_id"
      - name: type
        description: "변경할 서버 상태\n- **start**\n- **stop**\n- **reboot**: 서버 OS에 문제가
          발생하여 **reboot** 기능이 정상적으로 작동하지 않는 경우, **kill** 기능을 이용하시기 바랍니다. \n- **kill**:
          강제종료는 서버 안정성에 영향을 줄 수 있어 권장하지 않습니다. 불가피한 경우에만 사용하시기 바랍니다."
        in: formData
        required: true
        type: array
        items:
          type: string
          enum:
          - start
          - stop
          - reboot
          - kill
      produces:
      - application/json
      responses:
        '202':
          description: Accepted. 서버 상태 변경 요청 성공. 해당 작업은 비동기로 요청이 오기 때문에 HATEOAS(links)
            정보로 다시 조회가 필요하다.
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 서버가 파트너/사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 svr_id와 일치하는 자원이 없는 경우
        default:
          description: Unexpected error
  "/servers/{svr_id}/password":
    put:
      summary: 서버 비밀번호 변경
      description: |-
        ## 서버 접속 비밀번호를 새로 발급합니다.
        - 서버 상태가 운영(status: 03), 정지(status: 01)일 때만 가능합니다.
        - 비밀번호 발급 후 서버는 시작/재시작 해야 변경된 비밀번호가 적용됩니다.(정지 서버는 시작, 운영 서버는 재시작)
         - 비밀번호 변경 요청 성공시 HATEOAS로 해당 정보를 리턴해줍니다.
        - 변경된 비밀번호는 요청시만 확인할 수 있습니다. 변경된 비밀번호 분실시 다시 **비밀번호 변경**을 해야합니다.
      tags:
      - Servers
      parameters:
      - "$ref": "#/parameters/svr_id"
      produces:
      - application/json
      responses:
        '201':
          description: 비밀번호 변경 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 서버가 파트너/사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 svr_id와 일치하는 자원이 없는 경우
        default:
          description: Unexpected error
  "/servers/{svr_id}/volumes/{voL_id}":
    post:
      summary: 서버 볼륨 장착
      description: |-
        ## 서버에 볼륨을 장착합니다.
        - 서버 정지(status: 01) 상태만 요청 가능합니다.
      tags:
      - Servers
      - Volumes
      parameters:
      - "$ref": "#/parameters/svr_id"
      - in: path
        name: vol_id
        required: true
        type: string
        description: attach 하려는 볼륨의 ID
      produces:
      - application/json
      responses:
        '201':
          description: 볼륨 장착 성공
        '400':
          description: Bad request.
        '404':
          description: 서버 ID 또는 볼륨 ID가 존재하지 않음
        default:
          description: Unexpected error
    delete:
      summary: 서버 볼륨 해제
      description: |-
        ## 서버의 볼륨을 해제합니다.
        - 서버 정지(status: 01) 상태만 요청 가능합니다.
      tags:
      - Servers
      - Volumes
      parameters:
      - "$ref": "#/parameters/svr_id"
      - in: path
        name: vol_id
        required: true
        type: string
        description: detach 하려는 볼륨의 ID
      produces:
      - application/json
      responses:
        '200':
          description: OK. 볼륨 해제 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 서버, 볼륨이 파트너/사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 svr_id, vol_id와 일치하는 자원이 없는 경우
        default:
          description: Unexpected error
  "/servers/{svr_id}/fws":
    post:
      summary: 서버 방화벽 추가
      description: |-
        - **service**, **protocol**은 대문자를 기본으로 요청합니다.(소문자도 가능)
        - e.g.) 1 ~ n 개의 방화벽을 추가합니다.
         - **svr_id**: vm_280
         - **service**: HTTP, USER
         - **protocol**: TCP, ICMP
         - **start_port**: 80, 0
         - **end_port**: 80, 0
         - **ip_group**: 187.2.4.5/16, 0.0.0.0/0
         - **desc**: 웹 포트, 사용자 포트
      tags:
      - Servers
      - Firewall
      parameters:
      - in: path
        name: svr_id
        required: true
        type: string
        description: 서버 ID
      - in: formData
        name: service
        required: true
        type: string
        description: |
          서비스 사용자 정의 서비스 혹은 아래 정의된 [well-known port](https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers)를 사용할 수 있습니다.
          - **USER**: 아래에 정의된 well-known port 외의 사용자 정의 포트
          - **HTTP**: 80
          - **HTTPS**: 443
          - **DNS**: 53
          - **FTP-DATA**: 20
          - **FTP**: 21
          - **IMAP**: 143
          - **IMAPS**: 993
          - **LDAP**: 390
          - **MMS**: 9093
          - **MSSQL**: 1433
          - **MYSQL**: 3306
          - **POP3**: 110
          - **POP3S**: 995
          - **SMTP**: 25
          - **SMTPS**: 465
          - **SSH**: 22
          - **MS-WBT-SERVER**: 3389
      - in: formData
        name: protocol
        required: true
        type: string
        description: |-
          **service**의 프로토콜 **TCP**, **UDP**, **ICMP** 만 가능
          - **[TCP](https://namu.wiki/w/TCP)**
          - **[UDP](https://namu.wiki/w/UDP)**
          - **[ICMP](https://namu.wiki/w/ICMP)**
          - **service**를 **USER**로 요청합니다.
           - **start_port**, **end_port**를 **0**으로만 요청합니다.
      - in: formData
        name: start_port
        required: false
        type: string
        description: |-
          **service** well-known port 입력시 **start_port**를 입력하지 않으면 리스트의 기본 포트가 적용됩니다.
          - **protocol**이 **ICMP**일 때는 **0**만 가능합니다.
          - **protocol** **ICMP**일 때 **service**는 **USER**만 가능하기 때문에 미입력시 기본 적용 포트가 없습니다. 따라서 **ICMP**는 **0**으로 반드시 입력합니다.
      - in: formData
        name: end_port
        required: false
        type: string
        description: |-
          **service**에서 well-known port 입력시 **end_port**를 입력하지 않으면 리스트의 기본 포트가 적용됩니다.
          - **protocol**이 **ICMP**일 때는 **0**만 가능합니다.
          - **protocol** **ICMP**일 때 **service**는 **USER**만 가능하기 때문에 미입력시 기본 적용 포트가 없습니다. 따라서 **ICMP**는 **0**으로 반드시 입력합니다.
      - in: formData
        name: ip_group
        required: false
        type: string
        description: 입력하지 않으면 기본 값 **0.0.0.0/0**이 적용됩니다. [CIDR 계산기](http://www.ipaddressguide.com/cidr#range)
      - in: formData
        name: desc
        required: false
        type: string
        description: 방화벽 설명
      produces:
      - application/json
      responses:
        '201':
          description: OK. 서버 방화벽 생성 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 IP가 이미 다른 자원에서 사용중인 경우
        '404':
          description: Not Found. 넘어온 IP 일치하는 자원이 없는 경우
        default:
          description: Unexpected error
    delete:
      summary: 서버 방화벽 삭제
      description: |-
        ## 서버에 방화벽을 삭제합니다.
        - 기존에 존재하는 방화벽만 삭제할 수 있습니다.
      tags:
      - Servers
      - Firewall
      parameters:
      - in: path
        name: svr_id
        required: true
        type: string
        description: 서버 ID
      - in: query
        name: fw_ids
        required: true
        type: string
        description: |-
          방화벽 ID
          - e.g.) fr_1, fr_2
      produces:
      - application/json
      responses:
        '200':
          description: OK. 서버 방화벽 삭제 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 IP가 이미 다른 자원에서 사용중인 경우
        '404':
          description: Not Found. 넘어온 IP 일치하는 자원이 없는 경우
        default:
          description: Unexpected error
  "/servers/{svr_id}/ips/{ip_id}":
    post:
      summary: 서버 공인 IP 부착
      description: |-
        ## 서버에 공인 IP를 부착합니다.
        - 다른 자원에서 이미 이용중인 IP는 부착할 수 없습니다.
        - 서버의 서비스존과 다른 존의 IP는 부착할 수 없습니다.
      tags:
      - Servers
      - PublicIps
      produces:
      - application/json
      parameters:
      - in: path
        name: svr_id
        required: true
        type: string
        description: IP를 추가 할 서버 ID
      - in: path
        name: ip_id
        required: true
        type: string
        description: 할당 하려는 IP ID
      responses:
        '201':
          description: OK. 공인 IP 부착 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 서버/IP가 파트너 혹은 사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 서버/IP와 일치하는 자원이 없는 경우
        default:
          description: Unexpected error
    delete:
      summary: 서버 공인 IP 해제
      description: |-
        ## 서버에 부착된 공인 IP를 해제합니다.
        - 해제 이후엔 외부 접근이 불가합니다.
      tags:
      - Servers
      - PublicIps
      produces:
      - application/json
      parameters:
      - in: path
        name: svr_id
        required: true
        type: string
        description: IP를 삭제 할 서버 ID
      - in: path
        name: ip_id
        required: true
        type: string
        description: 삭제 하려는 IP ID
      responses:
        '200':
          description: OK. 공인 IP 해제 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 서버/IP가 파트너 혹은 사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 서버/IP와 일치하는 자원이 없는 경우
        default:
          description: Unexpected error
  "/volumes":
    get:
      summary: 볼륨 목록
      description: "## 볼륨 목록을 조회합니다."
      tags:
      - Volumes
      produces:
      - application/json
      responses:
        '200':
          description: 볼륨 목록 조회 성공
          schema:
            type: array
            description: 볼륨 목록
            items:
              type: object
              schema:
                "$ref": "#/definitions/Volumes"
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
    post:
      summary: 볼륨 생성
      description: "## 스토리지를 생성합니다."
      tags:
      - Volumes
      parameters:
      - name: user_id
        description: 사용자 ID
        in: formData
        required: true
        type: string
      - name: name
        description: 스토리지 이름
        in: formData
        required: true
        type: string
      - name: desc
        description: 볼륨 설명
        in: formData
        required: false
        type: string
      - name: size
        description: 볼륨 크기
        in: formData
        required: true
        type: integer
        enum:
        - 50
        - 100
        - 150
        - 200
        - 250
        - 300
        - 350
        - 400
        - 450
        - 500
      produces:
      - application/json
      responses:
        '201':
          description: Created. 볼륨 생성 성공
          schema:
            "$ref": "#/definitions/Volumes"
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
  "/volumes/{vol_id}":
    get:
      summary: 볼륨 상세정보
      description: |-
        볼륨의 상세정보를 조회합니다.
      tags:
      - Volumes
      parameters:
      - in: path
        name: vol_id
        required: true
        type: string
        description: 조회하려는 볼륨 ID
      produces:
      - application/json
      responses:
        '200':
          description: OK. 볼륨 상세정보 조회 성공
          schema:
            "$ref": "#/definitions/Volumes"
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 볼륨이 파트너/사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 vol_id와 일치하는 자원이 없는 경우
    put:
      summary: 볼륨 변경
      description: "## 볼륨 이름, 설명 변경"
      tags:
      - Volumes
      parameters:
      - in: path
        name: vol_id
        required: true
        type: string
        description: 변경하려는 볼륨 ID
      - in: formData
        name: name
        required: true
        type: string
        description: 변경하려는 볼륨 이름
      - in: formData
        name: desc
        required: false
        type: string
        description: 변경하려는 볼륨 설명
      produces:
      - application/json
      responses:
        '200':
          description: OK. 볼륨 이름, 설명 하지 않고 그대로 리턴
        '201':
          description: Created. 볼륨 이름, 설명 변경 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 볼륨이 파트너/사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 vol_id와 일치하는 자원이 없는 경우
        default:
          description: Unexpected error
    delete:
      summary: 볼륨 삭제
      description: 볼륨을 삭제합니다.
      tags:
      - Volumes
      parameters:
      - in: path
        name: vol_id
        required: true
        type: string
        description: 삭제하려는 볼륨 ID
      produces:
      - application/json
      responses:
        '204':
          description: No Content. 스토리지 삭제 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 볼륨이 파트너/사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 vol_id와 일치하는 자원이 없는 경우
        default:
          description: Unexpected error
  "/ips":
    get:
      summary: 공인 IP 목록
      description: "## 사용자의 모든 공인 IP 목록을 조회합니다."
      tags:
      - PublicIps
      produces:
      - application/json
      responses:
        '200':
          description: 공인 IP 목록 조회 성공
          schema:
            type: array
            description: 공인 IP 목록
            items:
              type: object
              schema:
                "$ref": "#/definitions/PublicIps"
    post:
      summary: 공인 IP 추가
      description: |-
        ## 외부에서 접급이 가능한 공인 IP를 추가합니다.
        - 추가한 공인 IP는 서버, 로드밸런서에 부착할 수 있습니다.
        - 공인 IP는 아이디 기준으로 1개까지 무료로 지원하며, 2개부터는 1개당 12원/시간 또는 5,000원/월(VAT 별도)의 가격으로 유료 지원합니다.
      tags:
      - PublicIps
      produces:
      - application/json
      parameters:
      - in: formData
        name: user_id
        required: true
        type: string
        description: 사용자 ID
      - in: formData
        name: service_zone
        required: true
        type: string
        enum:
        - zone_1
        - zone_2
        description: 서비스 존
      responses:
        '201':
          description: 공인 IP 할당 성공
          schema:
            "$ref": "#/definitions/PublicIps"
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        default:
          description: Unexpected error
  "/ips/{ip_id}":
    get:
      summary: 공인 IP 상세정보
      description: |-
        ## 공인 IP 상세정보를 조회합니다.
        - **ip_attach**: 공인 아이피가 부착되어 되어있는지 여부.
         - **SVR**: 서버
         - **LB**: 로드밸런서
         - **""**: 미부착
        - **attached**: ip_attach의 값이 **""**이 아니면 서버 혹은 로드밸런서 자원의 정보.
      tags:
      - PublicIps
      produces:
      - application/json
      parameters:
      - in: path
        name: ip_id
        required: true
        type: string
        description: 공인 IP ID
      responses:
        '200':
          description: OK. 공인 IP 상세정보
          schema:
            "$ref": "#/definitions/PublicIps"
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 공인 IP가 파트너/사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 ip_id와 일치하는 자원이 없는 경우
    delete:
      summary: 공인 IP 삭제
      description: |-
        ## 공인 IP를 삭제합니다.
        - 서버 혹은 로드밸런서에 부착된 IP는 해제 후 삭제 가능합니다.
      tags:
      - PublicIps
      produces:
      - application/json
      parameters:
      - in: path
        name: ip_id
        required: true
        type: string
        description: 삭제하려고하는 IP ID
      responses:
        '204':
          description: No Content. 공인 IP 삭제 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 공인 IP가 파트너/사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 ip_id와 일치하는 자원이 없는 경우
        default:
          description: Unexpected error
  "/lbs":
    get:
      summary: 로드밸런서 목록
      description: |-
        ## 사용자의 모든 로드밸런서 목록을 조회합니다.
        - 삭제된 자원은 제외.
      tags:
      - LoadBalancers
      produces:
      - application/json
      responses:
        '200':
          description: OK. 로드밸런서 목록 조회 성공
          schema:
            type: array
            description: 로드밸런서 목록
            items:
              type: object
              schema:
                "$ref": "#/definitions/LoadBalancer"
    post:
      summary: 로드밸런서 생성
      description: |-
        ## 서버 부하 및 트래픽 부하를 분산시켜주는 지능형 시스템
        - **다음의 파라미터는 소문자로 요청합니다.**(대문자로 요청대로 자동 소문자로 변환합니다.)
         - **port_mode**, **balance_mode**, **program**
        - **다음의 파라미터는 대문자로 요청합니다.**(소문자로 요청대로 자동 대문자로 변환합니다.)
         - **sticky_session**
      tags:
      - LoadBalancers
      produces:
      - application/json
      parameters:
      - in: formData
        name: user_id
        required: true
        type: string
        description: 사용자 ID
      - in: formData
        name: ip_id
        required: true
        type: string
        description: |-
          로드밸런서 IP ID
          - 다른 자원에서 사용중인 IP는 사용할 수 없습니다.
          - /ips/:ip_id
      - in: formData
        name: name
        required: true
        type: string
        description: |-
          로드밸런서 이름
          - **16**자 이하
          - 영문, 숫자, 특수문자(하이픈 '-', 언더바 '_', 콤마 '.') 가능
      - in: formData
        name: desc
        required: false
        type: string
        description: 로드밸런서 설명
      - in: formData
        name: service_zone
        required: true
        type: string
        enum:
        - zone_1
        - zone_2
        description: 로드밸런서 서비스존
      - in: formData
        name: port
        required: true
        type: string
        description: |-
          로드밸런서 포트 **`port_mode와 1:1 매칭 됩니다.(개수와 순서가 일치해야 합니다.)`**
          - **1 ~ 65535** 숫자만 입력할 수 있습니다.
          - e.g.) 80, 21, 22
      - in: formData
        name: port_mode
        required: true
        type: string
        description: |-
          로드밸런서 포트 모드 **`port와 1:1 매칭 됩니다.(개수와 순서가 일치해야 합니다.)`**
          - **http** : 일반 인터넷(웹) 통신에 사용됩니다.
          - **tcp** : SSL, SMTP 등 HTTP가 아닌 통신에 사용됩니다.
          - e.g.) http, tcp, tcp
      - in: formData
        name: port_desc
        required: false
        type: string
        description: |-
          로드밸런서 포트 설명 **`port, port_mode 1:1 매칭 됩니다.`**
          - **port: [80, 22] / port_mode: [http, tcp]**
           - **[ apache 포트, ssh 포트 ]** : 1:1로 매칭됩니다.
           - **[ apache 포트 ] / [ apache 포트, ]** : 첫번째 포트(80)만 설명이 추가됩니다.
           - **[ , ssh 포트 ]** : 두번째 포트(22)만 설명이 추가됩니다.
           - **[  ] / [ , ]** : 설명이 추가되지 않습니다.
          - 실제로 보낼 땐 '[ ]' 뺴고 보냅니다.
      - in: formData
        name: balance_mode
        required: true
        type: string
        enum:
        - r
        - l
        - h
        description: |-
          - **r** : Round Robin, 클라이언트가 요청한 작업을 순차적으로 순환시켜 각 서버에 분배하는 방식입니다.
          - **l** : Least Connection, 클라이언트가 요청한 작업을 작업량이 가장 적은 서버에 우선 분배하는 방식입니다.
          - **h** : Hash Source IP, 동일한 클라이언트가 요청한 작업을 지속적으로 같은 서버에 분배하는 방식입니다.
      - in: formData
        name: session_time
        required: true
        type: integer
        maximum: 180
        description: "1 ~ 180 초\n- 세션 타임아웃(Session Timeout) 시간을 설정하면 설정한 시간 동안은 클라이언트가
          작업을 요청하지 않아도 프로그램이 중단되지 않고 세션이 유지됩니다.\n- 설정 시간이 길수록 서버 작업량이 늘어나 서버 부하의 위험이
          커집니다.\n- 장시간 세션 유지가 필요한 경우에만 시간을 늘리는 것이 좋습니다. "
      - in: formData
        name: sticky_session
        required: true
        type: string
        enum:
        - N
        - Y
        description: "- 스티키 세션(Sticky Session)은 클라이언트의 동일한 요청이 항상 같은 서버에서 처리될 수 있도록
          경로를 지정해주는 옵션입니다.\n- 이 기능을 사용하면 설정한 세션 유효시간 동안 클라이언트 세션이 계속 같은 서버에 유지됩니다.\n-
          세션 유효 시간은 최대 24시간이며, 설정된 시간 이후에는 세션 연결이 끊어져 더 이상 같은 서버로 연결되지 않습니다. "
      - in: formData
        name: program
        type: string
        enum:
        - php
        - asp
        - net
        - jsp
        description: |-
          - 개발 언어
          - sticky_session 값이 **'Y'** 일때 필수
      - in: formData
        name: token_length
        type: integer
        maximum: 256
        description: |-
          - 1 ~ 256 Byte
          - sticky_session 값이 **'Y'** 일때 필수
      - in: formData
        name: sticky_time
        type: integer
        maximum: 86400
        description: |-
          - 1 ~ 86400 초
          - sticky_session 값이 **'Y'** 일때 필수
      responses:
        '201':
          description: OK. 로드밸런서 생성 성공
          schema:
            "$ref": "#/definitions/LoadBalancer"
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 IP가 이미 다른 자원에서 사용중인 경우
        '404':
          description: Not Found. 넘어온 IP 일치하는 자원이 없는 경우
  "/lbs/{lb_id}":
    get:
      summary: 로드밸런서 상세정보
      description: "## 로드밸런서 상세정보를 조회합니다."
      tags:
      - LoadBalancers
      produces:
      - application/json
      parameters:
      - in: path
        name: lb_id
        required: true
        type: string
        description: 로드밸런서 ID
      responses:
        '200':
          description: OK. 로드밸런서 상세정보
          schema:
            "$ref": "#/definitions/LoadBalancer"
        '400':
          description: Bad request.
        '404':
          description: Not Found. 로드밸런서 ID가 존재하지 않음
    put:
      summary: 로드밸런서 변경
      description: "## 로드밸런서의 이름, 설명 변경을 변경합니다."
      tags:
      - LoadBalancers
      parameters:
      - in: path
        name: lb_id
        required: true
        type: string
        description: 변경하려는 로드밸런서 ID
      - in: formData
        name: name
        required: true
        type: string
        description: |-
          로드밸런서 이름
          - **16**자 이하
          - 영문, 숫자, 특수문자(하이픈 '-', 언더바 '_', 콤마 '.') 가능
      - in: formData
        name: desc
        required: false
        type: string
        description: 로드밸런서 설명
      produces:
      - application/json
      responses:
        '200':
          description: OK. 이름, 설명 동일하기 때문에 이미지 수정 안하고 리턴
        '201':
          description: Created. 로드밸런서 이름, 설명 변경 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 변경하려는 로드밸런서가 파트너/사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 변경하려는 로드밸런서가 없는 경우
    delete:
      summary: 로드밸런서 삭제
      description: |-
        ## 로드밸런서를 삭제합니다.
        - 로드밸런서의 **network**가 **정지(stop)** 상태이면, 요청 불가능합니다.
        - IP에 부착된 IP는 자동 해제됩니다.
        - IP 삭제는 추가 요청이 필요합니다. **DELETE /ips/:ip_id**
      tags:
      - LoadBalancers
      produces:
      - application/json
      parameters:
      - in: path
        name: lb_id
        required: true
        type: string
        description: 삭제 하려는 로드밸런서 ID
      responses:
        '204':
          description: OK. 로드밸런서 삭제 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 로드밸런서가 사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 lb_id와 일치하는 자원이 없는 경우
  "/lbs/{lb_id}/setup":
    put:
      summary: 로드밸런서 설정 변경
      description: |-
        ## 로드밸런서의 밸런스 모드 설정을 변경합니다.
        - 로드밸런서의 **network**가 **정지(stop)** 상태이면, 요청 불가능합니다.
      tags:
      - LoadBalancers
      produces:
      - application/json
      parameters:
      - in: path
        name: lb_id
        required: true
        type: string
        description: 로드밸런서 ID
      - in: formData
        name: balance_mode
        required: false
        type: string
        enum:
        - r
        - l
        - h
        description: |-
          - **r** : Round Robin, 클라이언트가 요청한 작업을 순차적으로 순환시켜 각 서버에 분배하는 방식입니다.
          - **l** : Least Connection, 클라이언트가 요청한 작업을 작업량이 가장 적은 서버에 우선 분배하는 방식입니다.
          - **h** : Hash Source IP, 동일한 클라이언트가 요청한 작업을 지속적으로 같은 서버에 분배하는 방식입니다.
      - in: formData
        name: session_time
        required: false
        type: integer
        maximum: 180
        description: '1 ~ 180 초 '
      - in: formData
        name: sticky_session
        required: false
        type: string
        enum:
        - N
        - Y
        description: "- 스티키 세션(Sticky Session)은 클라이언트의 동일한 요청이 항상 같은 서버에서 처리될 수 있도록
          경로를 지정해주는 옵션입니다.\n- 이 기능을 사용하면 설정한 세션 유효시간 동안 클라이언트 세션이 계속 같은 서버에 유지됩니다.\n-
          세션 유효 시간은 최대 24시간이며, 설정된 시간 이후에는 세션 연결이 끊어져 더 이상 같은 서버로 연결되지 않습니다. "
      - in: formData
        name: program
        required: false
        type: string
        enum:
        - php
        - asp
        - net
        - jsp
        description: |-
          - 개발 언어
          - sticky_session 값이 **'Y'** 일때 필수
      - in: formData
        name: token_length
        required: false
        type: integer
        maximum: 256
        description: |-
          - 1 ~ 256 Byte
          - sticky_session 값이 **'Y'** 일때 필수
      - in: formData
        name: sticky_time
        required: false
        type: integer
        maximum: 86400
        description: |-
          - 1 ~ 86400 초
          - sticky_session 값이 **'Y'** 일때 필수
      responses:
        '200':
          description: OK. 변경하려는 데이터가 아무것도 없거나, 기존과 동일해서 변경하지 않은 경우
        '201':
          description: Created. 설정 변경 완료
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 서버가 사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 ID와 일치하는 자원이 없는 경우
  "/lbs/{lb_id}/ports":
    post:
      summary: 로드밸런서 포트 추가
      description: |-
        ## 로드밸런서의 포트를 추가합니다.
        - 로드밸런서의 **network**가 **정지(stop)** 상태이면, 요청 불가능합니다.
      tags:
      - LoadBalancers
      produces:
      - application/json
      parameters:
      - in: path
        name: lb_id
        required: true
        type: string
        description: 로드밸런서 ID
      - in: formData
        name: port
        required: true
        type: string
        description: |-
          추가하려는 포트 **`port_mode, port_desc와 1:1:1 매칭 됩니다.(개수와 순서가 일치해야 합니다.)`**
          - **1 ~ 65535** 숫자만 입력할 수 있습니다.
          - e.g.) 80, 21, 22
      - in: formData
        name: port_mode
        required: true
        type: string
        description: |-
          추가하려는 포트 모드 **`port, port_desc와 1:1:1 매칭 됩니다.(개수와 순서가 일치해야 합니다.)`**
          - **http** : 일반 인터넷(웹) 통신에 사용됩니다.
          - **tcp** : SSL, SMTP 등 HTTP가 아닌 통신에 사용됩니다.
          - e.g.) http, tcp, tcp
      - in: formData
        name: port_desc
        required: false
        type: string
        description: 추가하려는 포트 설명 **`port, port_mode 1:1:1 매칭 됩니다.`**
      responses:
        '201':
          description: Created. 포트 추가 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 LB가 사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 ID와 일치하는 자원이 없는 경우
    put:
      summary: 로드밸런서 포트 변경
      description: |-
        ## 로드밸런서의 포트 정보를 변경합니다.
        - 로드밸런서의 **network**가 **정지(stop)** 상태이면, 요청 불가능합니다.
      tags:
      - LoadBalancers
      produces:
      - application/json
      parameters:
      - in: path
        name: lb_id
        required: true
        type: string
        description: 로드밸런서 ID
      - in: formData
        name: port
        required: true
        type: string
        description: |-
          변경하려는 포트 **`port_mode, port_desc와 1:1:1 매칭 됩니다.(개수와 순서가 일치해야 합니다.)`**
          - **1 ~ 65535** 숫자만 입력할 수 있습니다.
          - e.g.) 80, 21, 22
      - in: formData
        name: port_mode
        required: true
        type: string
        description: |-
          변경하려는 포트 모드 **`port, port_desc와 1:1:1 매칭 됩니다.(개수와 순서가 일치해야 합니다.)`**
          - **http** : 일반 인터넷(웹) 통신에 사용됩니다.
          - **tcp** : SSL, SMTP 등 HTTP가 아닌 통신에 사용됩니다.
          - e.g.) http, tcp, tcp
      - in: formData
        name: port_desc
        required: false
        type: string
        description: 변경하려는 포트 설명 **`port, port_mode 1:1:1 매칭 됩니다.`**
      responses:
        '201':
          description: Created. 포트 변경 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 LB가 사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 ID와 일치하는 자원이 없는 경우
    delete:
      summary: 로드밸런서 포트 삭제
      description: |-
        ## 로드밸런서의 포트를 삭제합니다.
        - 로드밸런서의 **network**가 **정지(stop)** 상태이면, 요청 불가능합니다.
      tags:
      - LoadBalancers
      produces:
      - application/json
      parameters:
      - in: path
        name: lb_id
        required: true
        type: string
        description: 로드밸런서 ID
      - in: query
        name: port
        required: true
        type: string
        description: |-
          삭제하려는 포트
          - **1 ~ 65535** 숫자만 입력할 수 있습니다.
          - e.g.) 80, 21, 22
      responses:
        '200':
          description: OK. 포트 삭제 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 LB가 사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 ID와 일치하는 자원이 없는 경우
  "/lbs/{lb_id}/ips/{ip_id}":
    put:
      summary: 로드밸런서 IP 변경
      description: |-
        ## 로드밸런서의 IP를 변경합니다.
        - 로드밸런서의 **network**가 **정지(stop)** 상태이면, 요청 불가능합니다.
      tags:
      - LoadBalancers
      produces:
      - application/json
      parameters:
      - in: path
        name: lb_id
        required: true
        type: string
        description: 로드밸런서 ID
      - in: path
        name: ip_id
        required: true
        type: string
        description: 변경하는 IP ID
      responses:
        '201':
          description: Created. 서버 추가 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 서버가 사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 ID와 일치하는 자원이 없는 경우
  "/lbs/{lb_id}/ports/{port}/servers":
    post:
      summary: 로드밸런서 서버 추가
      description: |-
        ## 로드밸런서의 특정 포트에 서버를 추가합니다.
        - 로드밸런서의 **network**가 **정지(stop)** 상태이면, 요청 불가능합니다.
        - 추가 하려는 서버와 포트는 입력값에 따라 1:1로 매칭됩니다.
      tags:
      - LoadBalancers
      produces:
      - application/json
      parameters:
      - in: path
        name: lb_id
        required: true
        type: string
        description: 로드밸런서 ID
      - in: path
        name: port
        required: true
        type: string
        description: 로드밸런서 포트
      - in: formData
        name: svr_ids
        required: true
        type: string
        description: |-
          로드밸런서와 연결되는 서버 ID **`svr_ports와 1:1 매칭 됩니다.(개수와 순서가 일치해야 합니다.)`**
          - **vm_{id}** 형식만 입력할 수 있습니다.
          - e.g.) vm_1, vm_2, vm_3
      - in: formData
        name: svr_ports
        required: true
        type: string
        description: |-
          로드밸런서와 연결되는 서버 포트 **`svr_ids와 1:1 매칭 됩니다.(개수와 순서가 일치해야 합니다.)`**
          - **1 ~ 65535** 숫자만 입력할 수 있습니다.
          - e.g.) 80, 21, 22
      responses:
        '201':
          description: Created. 서버 추가 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 서버가 사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 ID와 일치하는 자원이 없는 경우
    put:
      summary: 로드밸런서 서버 수정
      description: |-
        ## 로드밸런서의 특정 포트에 연결된 서버를 포트 정보를 수정합니다.
        - 로드밸런서의 **network**가 **정지(stop)** 상태이면, 요청 불가능합니다.
        - 수정 하려는 서버와 포트는 입력값에 따라 1:1로 매칭됩니다.
      tags:
      - LoadBalancers
      produces:
      - application/json
      parameters:
      - in: path
        name: lb_id
        required: true
        type: string
        description: 로드밸런서 ID
      - in: path
        name: port
        required: true
        type: string
        description: 로드밸런서 포트
      - in: formData
        name: svr_ids
        required: true
        type: string
        description: |-
          로드밸런서와 연결되는 서버 ID **`svr_ports와 1:1 매칭 됩니다.(개수와 순서가 일치해야 합니다.)`**
          - **vm_{id}** 형식만 입력할 수 있습니다.
          - e.g.) vm_1, vm_2, vm_3
      - in: formData
        name: svr_ports
        required: true
        type: string
        description: |-
          로드밸런서와 연결되는 서버 포트 **`svr_ids와 1:1 매칭 됩니다.(개수와 순서가 일치해야 합니다.)`**
          - **1 ~ 65535** 숫자만 입력할 수 있습니다.
          - e.g.) 80, 21, 22
      responses:
        '201':
          description: Created. 서버 포트 정보 수정 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 서버가 사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 ID와 일치하는 자원이 없는 경우
    delete:
      summary: 로드밸런서 서버 삭제
      description: |-
        ## 로드밸런서의 특정 포트에 연결된 서버를 포트를 삭제합니다.
        - 로드밸런서의 **network**가 **정지(stop)** 상태이면, 요청 불가능합니다.
      tags:
      - LoadBalancers
      produces:
      - application/json
      parameters:
      - in: path
        name: lb_id
        required: true
        type: string
        description: 로드밸런서 ID
      - in: path
        name: port
        required: true
        type: string
        description: 로드밸런서 포트
      - in: query
        name: svr_ids
        required: true
        type: string
        description: |-
          로드밸런서와 연결되는 서버 ID
          - **vm_{id}** 형식만 입력할 수 있습니다.
          - e.g.) vm_1, vm_2, vm_3
      responses:
        '200':
          description: OK. 서버 포트 정보 삭제 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 서버가 사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 ID와 일치하는 자원이 없는 경우
  "/lbs/{lb_id}/network":
    put:
      summary: 로드밸런서 네트워크 변경
      description: "## 로드밸런서 네트워크를 시작/정지 상태로 변경합니다."
      tags:
      - LoadBalancers
      produces:
      - application/json
      parameters:
      - in: path
        name: lb_id
        required: true
        type: string
        description: 로드밸런서 ID
      - in: formData
        name: action
        required: true
        type: string
        enum:
        - start
        - stop
        description: |-
          로드밸런서 네트워크 시작/정지
          - 현재 상태와 다른 상태로만 변경 가능합니다.
          - e.g.) **start -> stop**
      responses:
        '200':
          description: OK. 네트워크 변경 완료
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 서버가 사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 넘어온 ID와 일치하는 자원이 없는 경우
  "/snapshots":
    get:
      summary: 스냅샷 목록
      description: "## 사용자의 모든 스냅샷 목록을 조회합니다."
      tags:
      - Snapshots
      produces:
      - application/json
      responses:
        '200':
          description: OK. 스냅샷 목록 조회 성공
          schema:
            type: array
            description: 서버 목록
            items:
              type: object
              schema:
                "$ref": "#/definitions/Snapshots"
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        default:
          description: Unexpected error
    post:
      summary: 스냅샷 생성
      description: |-
        ## 서버 스냅샷을 생성합니다.
        - **202**: 생성 요청 후 **status**: 0(생성중), **size**: 0 입니다.
        - 생성은 비동기로 이뤄지기 때문에 links의 HATEOAS로 다시 조회 합니다.
      tags:
      - Snapshots
      produces:
      - application/json
      parameters:
      - in: formData
        name: svr_id
        required: true
        type: string
        description: 스냅샷 생성하려는 서버 ID
      - in: formData
        name: user_id
        required: true
        type: string
        description: 사용자 ID
      - in: formData
        name: name
        required: true
        type: string
        description: 스냅샷 이름
      - in: formData
        name: desc
        required: false
        type: string
        description: |-
          스냅샷 설명
          - 다음 특수문자는 포함할 수 없습니다. [\, ?, ;, :, |, *, <, >, @, /]
      responses:
        '202':
          description: Accepted. 스냅샷 생성 요청 성공. 해당 작업은 비동기로 요청이 오기 때문에 HATEOAS(links)
            정보로 다시 조회가 필요하다.
          schema:
            "$ref": "#/definitions/Snapshots"
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 스냅샷으로 생성하려는 서버가 파트너/사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 스냅샷으로 생성하려는 서버가 없는 경우
        default:
          description: Unexpected error
  "/snapshots/{snap_id}":
    get:
      summary: 스냅샷 상세정보
      description: |-
        스냅샷 상세정보
      tags:
      - Snapshots
      produces:
      - application/json
      parameters:
      - in: path
        name: snap_id
        required: true
        type: string
        description: 스냅샷 ID
      responses:
        '200':
          description: 스냅샷 상세정보
          schema:
            "$ref": "#/definitions/Snapshots"
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 스냅샷으로 생성하려는 서버가 파트너/사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 스냅샷으로 생성하려는 서버가 없는 경우
        default:
          description: Unexpected error
    put:
      summary: 스냅샷 변경
      description: "## 스냅샷 이름, 설명 변경"
      tags:
      - Snapshots
      parameters:
      - in: path
        name: snap_id
        required: true
        type: string
        description: 변경하려는 스냅샷 ID
      - in: formData
        name: name
        required: true
        type: string
        description: 변경하려는 스냅샷 이름
      - in: formData
        name: desc
        required: false
        type: string
        description: 변경하려는 스냅샷 설명
      produces:
      - application/json
      responses:
        '200':
          description: OK. 이름, 설명 동일하기 때문에 스냅샷 수정 안하고 리턴
        '201':
          description: Created. 스냅샷 이름, 설명 변경 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 변경하려는 스냅샷이 파트너/사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 변경하려는 스냅샷이 없는 경우
        default:
          description: Unexpected error
    delete:
      summary: 스냅샷 삭제
      description: 스냅샷 삭제
      tags:
      - Snapshots
      produces:
      - application/json
      parameters:
      - in: path
        name: snap_id
        required: true
        type: string
        description: 삭제 하려는 스냅샷 ID
      responses:
        '202':
          description: Accepted. 스냅샷 삭제 요청 성공 해당 작업은 비동기로 요청이 오기 때문에 HATEOAS(links)
            정보로 다시 조회가 필요하다.
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 스냅샷으로 삭제하려는 스냅샷이 파트너/사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 스냅샷으로 삭제하려는 스냅샷이 없는 경우
        default:
          description: Unexpected error
  "/images":
    get:
      summary: 이미지 목록
      description: |-
        ## 사용자의 모든 이미지 목록을 조회합니다.
        - 공통으로 사용할 수 있는 이미지 목록을 가져올 수 있습니다.
         - /v1/images?q=user_id=cloud
      tags:
      - Images
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/collectionQuery"
      - "$ref": "#/parameters/collectionPaging"
      - "$ref": "#/parameters/collectionOrder"
      responses:
        '200':
          description: 이미지 목록 조회 성공
          schema:
            type: array
            description: 이미지 목록
            items:
              type: object
              schema:
                "$ref": "#/definitions/Images"
    post:
      summary: 이미지 생성
      description: |-
        ## 서버 혹은 스냅샷으로 이미지를 생성합니다.
        - SSD 타입의 서버는 해당 서버를 통해서 바로 이미지를 생성합니다.
        - SATA 타입의 서버는 해당 서버로 스냅샷을 생성하고 생성된 스냅샷을 통해 이미지를 생성합니다.
      tags:
      - Images
      produces:
      - application/json
      parameters:
      - in: formData
        name: user_id
        required: true
        type: string
        description: 사용자  ID
      - in: formData
        name: name
        required: true
        type: string
        description: |-
          이미지 이름
          - **5 ~ 16**자리
          - **알파벳, 숫자, '-', '_', '.'**만 사용 가능합니다.
      - in: formData
        name: desc
        required: true
        type: string
        description: |-
          이미지 설명
          - **0 ~ 255**자리
          - 다음 특수문자는 포함할 수 없습니다. [\, ?, ;, :, |, *, <, >, @, /]
      - in: formData
        name: svr_id
        required: false
        type: string
        description: |-
          SSD 서버인 경우. 이미지로 생성하려는 서버의 ID
          - **vm_{id}** 형식
          - SSD 서버로 생성하는 경우 **snap_id** 파라미터는 보내지 않습니다.
      - in: formData
        name: snap_id
        required: false
        type: string
        description: |-
          기본 SATA 서버인 경우. 이미지로 생성하려는 스냅샷 ID
          - **snap_{id}** 형식
          - SATA 서버로 생성하는 경우 **svr_id** 파라미터는 보내지 않습니다.
      responses:
        '202':
          description: 이미지 생성 요청 성공
          schema:
            "$ref": "#/definitions/Images"
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 요청한 서버 혹은 스냅샷으로 이미 이미지 생성을 요청한 경우
        '404':
          description: Not Found. 넘어온 서버 혹은 스냅샷에 일치하는 자원이 없는 경우
        default:
          description: Unexpected error
  "/images/{img_id}":
    get:
      summary: 이미지 상세정보
      description: |-
        이미지 상세정보 조회
      tags:
      - Images
      produces:
      - application/json
      parameters:
      - in: path
        name: img_id
        required: true
        type: string
        description: 이미지 ID
      responses:
        '200':
          description: OK. 이미지 상세정보
          schema:
            "$ref": "#/definitions/Images"
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 조회하려는 이미지가 파트너/사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 조회하려는 이미지가 없는 경우
        '200_':
          description: RESPONSE SAMPLE. 성공시 200
    put:
      summary: 이미지 변경
      description: "## 이미지 이름, 설명 변경"
      tags:
      - Images
      parameters:
      - in: path
        name: img_id
        required: true
        type: string
        description: 변경하려는 이미지 ID
      - in: formData
        name: name
        required: true
        type: string
        description: |-
          변경하려는 이미지 이름
          - **5 ~ 16**자리
          - **알파벳, 숫자, '-', '_', '.'**만 사용 가능합니다.
      - in: formData
        name: desc
        required: true
        type: string
        description: |-
          변경하려는 이미지 설명
          - **0 ~ 255**자리
          - 다음 특수문자는 포함할 수 없습니다. [\, ?, ;, :, |, *, <, >, @, /]
      produces:
      - application/json
      responses:
        '200':
          description: OK. 이름, 설명 동일하기 때문에 이미지 수정 안하고 리턴
        '201':
          description: Created. 이미지 이름, 설명 변경 성공
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 변경하려는 이미지가 파트너/사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 변경하려는 이미지가 없는 경우
        default:
          description: Unexpected error
    delete:
      summary: 이미지 삭제
      description: |-
        ## 이미지 삭제
        - 사용자가 직접 생성한 이미지만 삭제할 수 있습니다.
      tags:
      - Images
      produces:
      - application/json
      parameters:
      - in: path
        name: img_id
        required: true
        type: string
        description: 삭제 하려는 이미지 ID
      responses:
        '202':
          description: Accepted. 이미지 삭제 요청 성공
          schema:
            type: object
        '400':
          description: Bad request. 필수 파라미터가 없거나 파라미터 조건이 맞지 않는 경우
        '401':
          description: Unauthorized. 인증 실패. 인증 받지 않은 사용자
        '403':
          description: Forbidden. 삭제하려는 이미지가 파트너/사용자의 자원이 아닌 경우
        '404':
          description: Not Found. 삭제하려는 이미지가 없는 경우
definitions:
  Users:
    type: object
    properties:
      user_id:
        type: string
        description: 사용자 ID
        example: company_777
      createdate:
        type: dateTime
        description: 생성일
        example: "2017-09-12 08:53:12"
      resources:
        type: object
        properties:
          servers:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: 서버 ID
                  example: vm_1
                name:
                  type: string
                  description: 서버명
                  example: A-서버
          volumes:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: 볼륨 ID
                  example: vol_1
                name:
                  type: string
                  description: 볼륨명
                  example: 추가 스토리지
          ips:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: IP ID
                  example: pubIp_1
          fws:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: 방화벽 ID
                  example: fr_1
          lbs:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: 로드밸런서 ID
                  example: lbg_1
                name:
                  type: string
                  description: 로드밸런서명
                  example: 이벤트 로드밸런서
          snapshots:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: 스냅샷 ID
                  example: snap_1
                name:
                  type: string
                  description: 스냅샷명
                  example: 백업용 스냅샷
          images:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: 이미지 ID
                  example: img_1
                name:
                  type: string
                  description: 이미지명
                  example: 스케일아웃 이미지
  Servers:
    type: object
    properties:
      partner_id:
        type: string
        description: 파트너 ID
        example: biz_1004
      user_id:
        type: string
        description: 사용자 ID
        example: company_777
        minLength: 3
        maxLength: 16
        pattern: ^[\w\-]{3,16}$
      svr_id:
        type: string
        description: 서버 ID
        example: vm_1
        pattern: ^(vm_)+[1-9]{1}\d*$
      name:
        type: string
        description: 서버 이름
        example: WAS_1
        minLength: 1
        maxLength: 16
        pattern: ^[\w\-]{1,16}$
      desc:
        type: string
        description: 서버 설명
        example: 사용자 관리용 WAS 서버
        minLength: 0
        maxLength: 100
        pattern: ^((?![\/?;:|*<>@\\\'\"]).){0,100}$
      status:
        type: string
        description: 서버 상태
        example: '03'
        enum: ['01','02','03','04','05','06','07']
      regdate:
        type: dateTime
        description: 등록일
        example: '2017-09-13 01:47:45'
      os:
        type: integer
        description: 서버 OS
        example: Linux
        enum: ['Linux','Windows']
      cpu:
        type: integer
        description: 서버 CPU
        example: 1
      memory:
        type: integer
        description: 서버 메모리
        example: 2
      type:
        type: integer
        description: 서버 종류
        example: basic
        enum: ['basic','premium','ssd']
      private_ip:
        type: string
        description: 서버 사설 IP
        example: 192.168.248.2
        format: ipv4
      img_id:
        type: string
        description: 현재 서버가 생성된 이미지 ID
        example: img_131
        pattern: ^(img_)+[1-9]{1}\d*$
      service_zone:
        type: string
        description: 서버 서비스존
        example: zone_1
        enum: ['zone_1','zone_2']
      volumes:
        type: array
        description: 서버에 부착된 볼륨
        items:
          type: object
          properties:
            vol_id:
              type: string
              description: 볼륨 ID
              example: vol_1
              pattern: ^(vol_)+[1-9]{1}\d*$
            vol_name:
              type: string
              description: 볼륨 이름
              example: 서버 추가 볼륨
            vol_size:
              type: integer
              description: 볼륨 크기
              example: 50
      ips:
        type: array
        description: 서버에 부착된 공인 IP
        items:
          type: object
          properties:
            ip_id:
              type: string
              description: IP ID
              example: pubIp_1
              pattern: ^(pubIp_)+[1-9]{1}\d*$
            ip_addr:
              type: string
              description: IP 주소
              example: 10.222.222.143
              format: ipv4
      fws:
        type: array
        description: 서버에 설정된 방화벽 정보
        items:
          type: object
          properties:
            fw_id:
              type: string
              description: 방화벽 ID
              example: fr_1
              pattern: ^(fr_)+[1-9]{1}\d*$
            service:
              type: string
              description: 서비스
              example: HTTP
            protocol:
              type: string
              description: 프로토콜
              example: TCP
            start_port:
              type: integer
              description: 시작 포트번호
              example: 80
              minimum: 1
              maximum: 65535
            end_port:
              type: integer
              description: 끝 포트번호
              example: 80
              minimum: 1
              maximum: 65535
            ip_group:
              type: string
              description: IP/그룹
              example: 0.0.0.0/0
            desc:
              type: string
              description: 방화벽 설명
              example: apache 방화벽
      lbs:
        type: array
        description: 서버에 연결되어 있는 로드밸런서
        items:
          type: object
          properties:
            lbg_id:
              type: string
              description: 로드밸런서 ID
              example: lbg_2
              pattern: ^(lbg_)+[1-9]{1}\d*$
            lb_port:
              type: integer
              description: 로드밸런서 포트
              example: 80
              minimum: 1
              maximum: 65535
            lb_svr_port:
              type: integer
              description: 로드밸런서와 연결된 서버의 포트
              example: 8080
              minimum: 1
              maximum: 65535
      storage:
        type: integer
        description: 서버 전체 볼륨 크기
        example: 100
  Volumes:
    type: object
    properties:
      partner_id:
        type: string
        description: 파트너 ID
        example: biz_1004
      user_id:
        type: string
        description: 사용자 ID
        example: company_777
      svr_id:
        type: string
        description: 볼륨 ID
        example: vol_1
      name:
        type: string
        description: 볼륨 이름
        example: backup-volume
      desc:
        type: string
        description: 볼륨 설명
        example: 백업용 추가 볼륨
      status:
        type: string
        description: 볼륨 상태
        example: '02'
      type:
        type: string
        description: 볼륨 종류
        example: basic
      attached:
        type: string
        description: 서버에 부착 여부
        example: Y
      attachdate:
        type: dateTime
        description: 부착일
        example: '2017-09-13T05:49:46.000Z'
      dettachdate:
        type: dateTime
        description: 해제일
        example: 'null'
      createdate:
        type: dateTime
        description: 생성일
        example: '2017-09-13T01:22:17.000Z'
      deletedate:
        type: dateTime
        description: 삭제일
        example: 0000-00-00 00:00:00
      server:
        type: object
        properties:
          svr_id:
            type: string
            description: 서버 ID
            example: vm_1
          name:
            type: string
            description: 서버 이름
            example: WAS_1
  PublicIps:
    type: object
    properties:
      partner_id:
        type: string
        description: 파트너 ID
        example: biz_1004
      user_id:
        type: string
        description: 사용자 ID
        example: company_777
      ip_id:
        type: string
        description: IP ID
        example: pubIp_1
      ip_addr:
        type: string
        description: IP 주소
        example: 10.222.222.148
      ip_attach:
        type: string
        description: IP가 부착된 서비스 타입
        example: SVR
      service_zone:
        type: string
        description: IP 서비스존
        example: zone_1
      attached:
        type: object
        properties:
          id:
            type: string
            description: IP가 부착된 자원 ID
            example: vm_1
          name:
            type: string
            description: IP가 부착된 자원 이름
            example: WAS_1
  LoadBalancer:
    type: object
    properties:
      partner_id:
        type: string
        description: 파트너 ID
        example: biz_1004
      user_id:
        type: string
        description: 사용자 ID
        example: company_777
      lb_id:
        type: string
        description: 로드밸런서 ID
        example: lbg_1
      lb_ip:
        type: string
        description: 로드밸런서에 부착된 IP ID
        example: pubIp_2
      name:
        type: string
        description: 로드밸런서 이름
        example: backup-volume
      desc:
        type: string
        description: 로드밸런서 설명
        example: 백업용 추가 볼륨
      createdate:
        type: dateTime
        description: 생성일
        example: '2017-09-14T05:14:26.000Z'
      sticky_session:
        type: integer
        description: 스티키세션 사용여부
        example: Y
      session_time:
        type: integer
        description: n 초 동안 프로그램이 중단되지 않고 세션이 유지
        example: 180
      program:
        type: string
        description: 개발 언어
        example: php
      sticky_time:
        type: integer
        description: n 초가 세션 유효시간
        example: 10800
      token_length:
        type: integer
        description: 토큰길이
        example: 64
      balance_mode:
        type: string
        description: 로드밸런서 작동방식
        example: r
      service_zone:
        type: string
        description: 로드밸런서 서비스존
        example: zone_1
      lb_port:
        type: array
        description: 로드밸런서 포트
        items:
          type: object
          properties:
            port:
              type: integer
              description: 포트 번호
              example: 80
            mode:
              type: string
              description: 포트 프로토콜
              example: http
            desc:
              type: string
              description: 포트 설명
              example: 'apache '
            servers:
              type: array
              description: 로드밸런서 포트에 부착된 서버
              items:
                type: object
                properties:
                  svr_id:
                    type: string
                    description: 서버 ID
                    example: vm_1
                  port:
                    type: integer
                    description: 로드밸런서와 연결된 서버의 포트
                    example: 8080
      network:
        type: string
        description: 로드밸런서 네트워크 시작|정지 여부
        example: start
      lp:
        type: object
        properties:
          ip_id:
            type: string
            description: 로드밸런서 IP ID
            example: pubIp_1
          ip_addr:
            type: string
            description: 로드밸런서 IP 주소
            example: 10.222.222.148
          service_zone:
            type: string
            description: 로드밸런서 IP 서비스존
            example: zone_1
  Snapshots:
    type: object
    properties:
      partner_id:
        type: string
        description: 파트너 ID
        example: biz_1004
      user_id:
        type: string
        description: 사용자 ID
        example: company_777
      snap_id:
        type: string
        description: 스냅샷 ID
        example: snap_1
      name:
        type: string
        description: 스냅샷 이름
        example: backup-snap
      desc:
        type: string
        description: 스냅샷 설명
        example: 백업용 스냅샷
      status:
        type: string
        description: 스냅샷 상태
        example: '9'
      type:
        type: string
        description: 스냅샷을 찍은 자원 타입
        example: SVR
      cloud_id:
        type: string
        description: 스냅샷을 찍은 자원 ID
        example: vm_1
      createdate:
        type: dateTime
        description: 생성일
        example: '2017-09-14T05:14:26.000Z'
      deletedate:
        type: dateTime
        description: 삭제일
        example: '2017-09-14T05:14:26.000Z'
  Images:
    type: object
    properties:
      partner_id:
        type: string
        description: 파트너 ID
        example: biz_1004
      user_id:
        type: string
        description: 사용자 ID
        example: company_777
      img_id:
        type: string
        description: 이미지 ID
        example: img_1
      name:
        type: string
        description: 이미지 이름
        example: centos-6.x-i686_TEST
      desc:
        type: string
        description: 이미지 설명
        example: ''
      img_type:
        type: string
        description: 이미지 종류
        example: SATA
      img_os:
        type: string
        description: 이미지 OS
        example: Linux
      img_os_type:
        type: string
        description: 이미지 OS 종류
        example: cent
      img_os_bit:
        type: integer
        description: 이미지 OS 비트
        example: 32
      img_memory:
        type: integer
        description: 이미지 메모리
        example: 1
      max_memory:
        type: integer
        description: 이미지 최대 메모리
        example: 4
      max_cpu:
        type: integer
        description: 이미지 최대 CPU
        example: 4
      img_cpu:
        type: integer
        description: 이미지 CPU
        example: 1
      img_size:
        type: integer
        description: 이미지 크기
        example: 50
      img_price:
        type: integer
        description: 이미지 가격
        example: 0
      snap_id:
        type: string
        description: 이미지을 찍은 자원 ID
        example:
      img_sell_flag:
        type: string
        description: 이미지 판매 여부
        example: N
      img_group:
        type: string
        description: 이미지 그룹
        example: '1'
      regdate:
        type: dateTime
        description: 생성일
        example: '2017-09-13 10:28:08'
      updatedate:
        type: dateTime
        description: 수정일
        example: 0000-00-00 00:00:00
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      msg:
        type: string
      desc:
        type: string
  BadRequest:
    type: object
    properties:
      msg:
        type: string
        description: 에러 메세지
        example: "'{PARAMETER}' is must required. Your input '{PARAMETER}': ''."
      code:
        type: integer
        description: 에러 코드
        example: -621
      desc:
        type: string
        description: 에러 설명
        example: "[Auth] REST API 오류. 필수값이 없거나 유효하지 않습니다."
  Unauthorized:
    type: object
    properties:
      msg:
        type: string
        description: 에러 메세지
        example: "invalid secret key. Your input : ''."
      code:
        type: integer
        description: 에러 코드
        example: -606
      desc:
        type: string
        description: 에러 설명
        example: "[Auth] JWT 오류. 유효하지 않은 secret key"
  PermissionDeny:
    type: object
    properties:
      msg:
        type: string
        description: 에러 메세지
        example: "permission deny. {RESOURCE-NAME} '{RESOURCE-ID}' is not your resource."
      code:
        type: integer
        description: 에러 코드
        example: -3012
      desc:
        type: string
        description: 에러 설명
        example: "[API] 자원 접근 권한. 해당 자원이 입력된 파트너의 자원이 아님."
  NotFound:
    type: object
    properties:
      msg:
        type: string
        description: 에러 메세지
        example: "{RESOURCE-NAME} '{RESOURCE-ID}' does not exist."
      code:
        type: integer
        description: 에러 코드
        example: -3011
      desc:
        type: string
        description: 에러 설명
        example: "[API] 자원 접근 권한. 입력된 값과 일치하는 자원이 존재하지 않음."
